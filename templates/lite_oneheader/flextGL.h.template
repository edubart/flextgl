@require(passthru, functions, enums, options, version, extensions, args)
#ifndef __gl_h_
#define __gl_h_
/*
    This file was generated using https://github.com/mosra/flextgl:

        path/to/flextGLgen.py @args

    Do not edit directly, modify the template or profile and regenerate.
*/

#ifdef __cplusplus
extern "C" {
#endif

/* Function declaration macros - to move into glplatform.h */

#if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__)
#define WIN32_LEAN_AND_MEAN 1
#ifndef WINAPI
#define WINAPI __stdcall
#endif
#define APIENTRY WINAPI
#endif

#ifndef APIENTRY
#define APIENTRY
#endif
#ifndef APIENTRYP
#define APIENTRYP APIENTRY *
#endif
#ifndef GLAPI
#define GLAPI extern
#endif

/* ------------------------- KHR platform types ---------------------------- */

#include <stddef.h> /* For size_t. */
#ifdef _MSC_VER
    #if defined(__clang__)
        #pragma GCC diagnostic push
        #pragma GCC diagnostic ignored "-Wlanguage-extension-token"
        #pragma GCC diagnostic ignored "-Wc++11-long-long"
    #endif
    typedef   signed __int8  khronos_int8_t;
    typedef unsigned __int8  khronos_uint8_t;
    typedef   signed __int16 khronos_int16_t;
    typedef unsigned __int16 khronos_uint16_t;
    typedef   signed __int32 khronos_int32_t;
    typedef unsigned __int32 khronos_uint32_t;
    typedef   signed __int64 khronos_int64_t;
    typedef unsigned __int64 khronos_uint64_t;
    #if defined(__clang__)
        #pragma GCC diagnostic pop
    #endif
#else
    #define MA_HAS_STDINT
    #include <stdint.h>
    typedef int8_t   khronos_int8_t;
    typedef uint8_t  khronos_uint8_t;
    typedef int16_t  khronos_int16_t;
    typedef uint16_t khronos_uint16_t;
    typedef int32_t  khronos_int32_t;
    typedef uint32_t khronos_uint32_t;
    typedef int64_t  khronos_int64_t;
    typedef uint64_t khronos_uint64_t;
#endif

#ifdef MA_HAS_STDINT
    typedef uintptr_t khronos_uintptr_t;
    typedef intptr_t  khronos_intptr_t;
    typedef uintptr_t khronos_usize_t;
    typedef intptr_t  khronos_ssize_t;
#else
    #if defined(_WIN32)
        #if defined(_WIN64)
            typedef khronos_uint64_t khronos_uintptr_t;
            typedef khronos_int64_t  khronos_intptr_t;
            typedef khronos_uint64_t khronos_usize_t;
            typedef khronos_int64_t  khronos_ssize_t;
        #else
            typedef khronos_uint32_t khronos_uintptr_t;
            typedef khronos_int32_t  khronos_intptr_t;
            typedef khronos_uint32_t khronos_usize_t;
            typedef khronos_int32_t  khronos_ssize_t;
        #endif
    #elif defined(__GNUC__)
        #if defined(__LP64__)
            typedef khronos_uint64_t khronos_uintptr_t;
            typedef khronos_int64_t  khronos_intptr_t;
            typedef khronos_uint64_t khronos_usize_t;
            typedef khronos_int64_t  khronos_ssize_t;
        #else
            typedef khronos_uint32_t khronos_uintptr_t;
            typedef khronos_int32_t  khronos_intptr_t;
            typedef khronos_uint32_t khronos_usize_t;
            typedef khronos_int32_t  khronos_ssize_t;
        #endif
    #else
        typedef khronos_uint64_t khronos_uintptr_t;
        typedef khronos_int64_t  khronos_intptr_t;
        typedef khronos_uint64_t khronos_usize_t;   /* Fallback. */
        typedef khronos_int64_t  khronos_ssize_t;
    #endif
#endif
typedef float khronos_float_t;

/* ------------------------------- DATA TYPES ------------------------------ */

@passthru

/* ----------------------------------- ENUMS --------------------------------- */

@enums

/* --------------------------- FUNCTION PROTOTYPES --------------------------- */

@for cat,funcs in functions:

/* GL_@cat */

    @if cat in []:
        @for f in funcs:
GLAPI @f.returntype APIENTRY gl@f.name (@f.param_list_string());
        @end
    @else:
        @for f in funcs:
typedef @f.returntype (APIENTRY PFNGL@f.name.upper()_PROC (@f.param_list_string()));
        @end
    @end
@end

typedef union {
void * fp[@str(sum((len(f) if c not in [] else 0) for c, f in functions))];
struct {

@for cat,funcs in functions:
    @if cat not in []:
        @for f in funcs:
PFNGL@f.name.upper()_PROC *@f.name;
        @end
    @end
@end
};} GLPF;
extern GLPF glpf;

@for cat,funcs in functions:
    @if cat not in []:
        @for f in funcs:
#define gl@f.name glpf.@f.name
        @end
    @end

@end

/* --------------------------- CATEGORY DEFINES ------------------------------ */

@for cat,funcs in functions:
#define GL_@cat
@end

/* ---------------------- Flags for optional extensions ---------------------- */

@for extension,required in extensions:
extern int FLEXT_@extension;
@end

int flextInit(void);

#define FLEXT_MAJOR_VERSION @version.major!s
#define FLEXT_MINOR_VERSION @version.minor!s
@if version.profile == 'core':
#define FLEXT_CORE_PROFILE 1
@else:
#define FLEXT_CORE_PROFILE 0
@end

#ifdef __cplusplus
}
#endif

#endif /* _gl_h_ */


#ifdef FLEXTGL_IMPL

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#if defined(_WIN32) || defined(WIN32)
#define FLEXT_CALL __stdcall
#else
#define FLEXT_CALL
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* FLEXT_C_EXTENSION
 * Compiling in strict c leads to errors due to void* to function ptr
 * cast being illegal. Mark as extension so that the compiler will
 * accept it.
 */
#if defined(__GNUC__) || defined(__clang__)
#define FLEXT_C_EXTENSION(x) __extension__(x)
#else
#define FLEXT_C_EXTENSION(x) x
#endif

typedef void(FLEXT_CALL *GLPROC)();

void flextLoadOpenGLFunctions(void);

static void open_libgl(void);
static void close_libgl(void);
static GLPROC get_proc(const char *proc);
static void add_extension(const char* extension);

int flextInit(void)
{
    GLint minor, major;
    @if version.major >= 3:
    GLint num_extensions;
    int i;
    @else:
    const char* p;
    GLubyte* extensions;
    GLubyte* i;
    @end
    @if version.int_value() >= 32 and not version.profile == 'core':
    GLint profile;
    @end

    open_libgl();
    flextLoadOpenGLFunctions();
    close_libgl();

    @if version.major >= 3:
    glGetIntegerv(GL_MAJOR_VERSION, &major);
    glGetIntegerv(GL_MINOR_VERSION, &minor);
    @else:
    p = (const char *) glGetString(GL_VERSION);
    if (p == NULL) {
        return GL_FALSE;
    }

    for (major = 0; *p >= '0' && *p <= '9'; p++) {
        major = 10 * major + *p - '0';
    }

    for (minor = 0, p++; *p >= '0' && *p <= '9'; p++) {
        minor = 10 * minor + *p - '0';
    }
    @end

    /* --- Check for minimal version and profile --- */

    if (major * 10 + minor < @version.int_value()!s) {
#if !defined(FLEXT_NO_LOGGING)
        fprintf(stderr, "Error: OpenGL version @version.major!s.@version.minor!s not supported.\n");
        fprintf(stderr, "       Your version is %d.%d.\n", major, minor);
        fprintf(stderr, "       Try updating your graphics driver.\n");
#endif
        return GL_FALSE;
    }

    @if version.int_value() >= 32 and not version.profile == 'core':
    glGetIntegerv(GL_CONTEXT_PROFILE_MASK, &profile);

    if ((profile & GL_CONTEXT_COMPATIBILITY_PROFILE_BIT) == 0) {
#if !defined(FLEXT_NO_LOGGING)
        fprintf(stderr, "Error: This application requires a compatibility profile\n");
#endif
        return GL_FALSE;
    }
    @end

    /* --- Check for extensions --- */

    @if version.major < 3:
    extensions = strdup(glGetString(GL_EXTENSIONS));
    i = extensions;

    while (*i != '\0') {
        GLubyte *ext = i;
        while (*i != ' ' && *i != '\0') {
            ++i;
        }
        while (*i == ' ') {
            *i = '\0';
            ++i;
        }

        add_extension(ext);
    }

    free(extensions);
    @else:
    glGetIntegerv(GL_NUM_EXTENSIONS, &num_extensions);

    for (i = 0; i < num_extensions; i++) {
        add_extension((const char*)glGetStringi(GL_EXTENSIONS, i));
    }
    @end

    @for extension,required in extensions:
    @if required:
    if (!FLEXT_@extension) {
        fprintf(stderr, "Error: OpenGL extension GL_@extension not supported.\n");
        fprintf(stderr, "       Try updating your graphics driver.\n");
        return GL_FALSE;
    }
    @end
    @end

    return GL_TRUE;
}



void flextLoadOpenGLFunctions(void)
{
    /* --- Function pointer loading --- */

    int i;
    for(i = 0 ; i < @str(sum((len(f) if c not in ['VERSION_1_0', 'VERSION_1_1','VERSION_1_0_DEPRECATED', 'VERSION_1_1_DEPRECATED' ] else 0) for c, f in functions)) ; i++){
        glpf.fp[i] = get_proc(glpf.fp[i]);
    }
}

/* ----------------------- Extension flag definitions ---------------------- */
@for extension,required in extensions:
int FLEXT_@extension = GL_FALSE;
@end

/* ---------------------- Function pointer definitions --------------------- */
GLPF glpf = {
@for category,funcs in functions:
@if len(funcs) > 0 and category not in ['VERSION_1_0', 'VERSION_1_1','VERSION_1_0_DEPRECATED', 'VERSION_1_1_DEPRECATED' ]:
/* GL_@category */
/* @str(len(funcs)) functions */
@for f in funcs:
"gl@f.name",
@end

@end
@end
};


static void add_extension(const char* extension)
{
@for extension,required in extensions:
    if (strcmp("GL_@extension", extension) == 0) {
        FLEXT_@extension = GL_TRUE;
    }
@end
}


/* ------------------ get_proc from Slavomir Kaslev's gl3w ----------------- */

#ifdef _WIN32
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>

static HMODULE libgl;

static void open_libgl(void)
{
    libgl = LoadLibraryA("opengl32.dll");
}

static void close_libgl(void)
{
    FreeLibrary(libgl);
}

static GLPROC get_proc(const char *proc)
{
    GLPROC res;

    res = wglGetProcAddress(proc);
    if (!res)
        res = GetProcAddress(libgl, proc);
    return res;
}
#elif defined(__APPLE__) || defined(__APPLE_CC__)
#include <Carbon/Carbon.h>

CFBundleRef bundle;
CFURLRef bundleURL;

static void open_libgl(void)
{
    bundleURL = CFURLCreateWithFileSystemPath(kCFAllocatorDefault,
                CFSTR("/System/Library/Frameworks/OpenGL.framework"),
                kCFURLPOSIXPathStyle, true);

    bundle = CFBundleCreate(kCFAllocatorDefault, bundleURL);
    assert(bundle != NULL);
}

static void close_libgl(void)
{
    CFRelease(bundle);
    CFRelease(bundleURL);
}

static GLPROC get_proc(const char *proc)
{
    GLPROC res;

    CFStringRef procname = CFStringCreateWithCString(kCFAllocatorDefault, proc,
                kCFStringEncodingASCII);
    FLEXT_C_EXTENSION(res = CFBundleGetFunctionPointerForName(bundle, procname));
    CFRelease(procname);
    return res;
}
#elif defined(ANDROID)
#include <EGL/egl.h>

static void open_libgl(void)
{
    // nothing to do
}

static void close_libgl(void)
{
    // nothing to do
}

static GLPROC get_proc(const char *proc)
{
    GLPROC res;
    res = eglGetProcAddress((const char *) proc);
    return res;
}
#else
#include <dlfcn.h>
#include <GL/glx.h>

static void *libgl;

static void open_libgl(void)
{
    libgl = dlopen("libGL.so.1", RTLD_LAZY | RTLD_GLOBAL);
}

static void close_libgl(void)
{
    dlclose(libgl);
}

static GLPROC get_proc(const char *proc)
{
    GLPROC res;

    res = glXGetProcAddress((const GLubyte *) proc);
    if (!res) {
        FLEXT_C_EXTENSION(res = dlsym(libgl, proc));
    }
    return res;
}
#endif

#ifdef __cplusplus
}
#endif

#endif
